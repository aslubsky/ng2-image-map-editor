export class Area {
    constructor(coords, type) {
        // Public properties:
        this.type = type;
        this.attributes = {
            href: '',
            alt: '',
            title: ''
        };
        // Private properties:
        this._params = {};
        // the g-element, it contains this area and helpers elements
        this._groupEl = document.createElementNS(Area.SVG_NS, 'g');
        Area.app.addNodeToSvg(this._groupEl);
        // Todo: remove this fielf from DOM-element
        /* Link to parent object */
        this._groupEl.obj = this;
        // svg-dom-element of area
        this._el = null;
        // Array/object with all helpers of area
        this._helpers = {}; // or []
    }
    testCoords() {
        throw new Error('This is abstract method');
    }
    setCoords(params) {
        throw new Error('This is abstract method');
    }
    redraw(params) {
        throw new Error('This is abstract method');
    }
    remove() {
        Area.app.removeNodeFromSvg(this._groupEl);
    }
    select() {
        this._el.classList.add(Area.CLASS_NAMES.SELECTED);
        return this;
    }
    deselect() {
        this._el.classList.remove(Area.CLASS_NAMES.SELECTED);
        return this;
    }
    with_href() {
        this._el.classList.add(Area.CLASS_NAMES.WITH_HREF);
        return this;
    }
    without_href() {
        this._el.classList.remove(Area.CLASS_NAMES.WITH_HREF);
        return this;
    }
    setInfoAttributes(params) {
        if (params.href) {
            this.attributes.href = params.href;
        }
        if (params.alt) {
            this.attributes.alt = params.alt;
        }
        if (params.title) {
            this.attributes.title = params.title;
        }
    }
    toJSON() {
        return {
            // type: this._type,//?????
            coords: this._params,
            attributes: this.attributes
        };
    }
}
Area.SVG_NS = 'http://www.w3.org/2000/svg';
Area.HTML = 'http://www.w3.org/1999/xhtml';
Area.CLASS_NAMES = {
    SELECTED: 'selected',
    WITH_HREF: 'with_href'
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJlYS5jbGFzcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hcmVhLmNsYXNzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sT0FBTyxJQUFJO0lBeUJiLFlBQVksTUFBVyxFQUFFLElBQVU7UUFDL0IscUJBQXFCO1FBQ3JCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxVQUFVLEdBQUc7WUFDZCxJQUFJLEVBQUUsRUFBRTtZQUNSLEdBQUcsRUFBRSxFQUFFO1lBQ1AsS0FBSyxFQUFFLEVBQUU7U0FDWixDQUFDO1FBRUYsc0JBQXNCO1FBQ3RCLElBQUksQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDO1FBRWxCLDREQUE0RDtRQUM1RCxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQztRQUMzRCxJQUFJLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFckMsMkNBQTJDO1FBQzNDLDJCQUEyQjtRQUMzQixJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUM7UUFFekIsMEJBQTBCO1FBQzFCLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDO1FBRWhCLHdDQUF3QztRQUN4QyxJQUFJLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQyxDQUFDLFFBQVE7SUFDaEMsQ0FBQztJQUVNLFVBQVU7UUFDYixNQUFNLElBQUksS0FBSyxDQUFDLHlCQUF5QixDQUFDLENBQUM7SUFDL0MsQ0FBQztJQUVNLFNBQVMsQ0FBQyxNQUFZO1FBQ3pCLE1BQU0sSUFBSSxLQUFLLENBQUMseUJBQXlCLENBQUMsQ0FBQztJQUMvQyxDQUFDO0lBRU0sTUFBTSxDQUFDLE1BQVk7UUFDdEIsTUFBTSxJQUFJLEtBQUssQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO0lBQy9DLENBQUM7SUFFTSxNQUFNO1FBQ1QsSUFBSSxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUVNLE1BQU07UUFDVCxJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNsRCxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBRU0sUUFBUTtRQUNYLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3JELE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFFTSxTQUFTO1FBQ1osSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDbkQsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUVNLFlBQVk7UUFDZixJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUN0RCxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBRU0saUJBQWlCLENBQUMsTUFBVztRQUNoQyxJQUFJLE1BQU0sQ0FBQyxJQUFJLEVBQUU7WUFDYixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDO1NBQ3RDO1FBRUQsSUFBSSxNQUFNLENBQUMsR0FBRyxFQUFFO1lBQ1osSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQztTQUNwQztRQUVELElBQUksTUFBTSxDQUFDLEtBQUssRUFBRTtZQUNkLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUM7U0FDeEM7SUFDTCxDQUFDO0lBRU0sTUFBTTtRQUNULE9BQU87WUFDSCwyQkFBMkI7WUFDM0IsTUFBTSxFQUFFLElBQUksQ0FBQyxPQUFPO1lBQ3BCLFVBQVUsRUFBRSxJQUFJLENBQUMsVUFBVTtTQUM5QixDQUFDO0lBQ04sQ0FBQzs7QUExR2EsV0FBTSxHQUFXLDRCQUE0QixDQUFDO0FBQzlDLFNBQUksR0FBVyw4QkFBOEIsQ0FBQztBQUM5QyxnQkFBVyxHQUFRO0lBQzdCLFFBQVEsRUFBRSxVQUFVO0lBQ3BCLFNBQVMsRUFBRSxXQUFXO0NBQ3pCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgQXJlYSB7XG4gICAgcHVibGljIHN0YXRpYyBhcHA6IGFueTtcbiAgICBwdWJsaWMgc3RhdGljIFNWR19OUzogc3RyaW5nID0gJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJztcbiAgICBwdWJsaWMgc3RhdGljIEhUTUw6IHN0cmluZyA9ICdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sJztcbiAgICBwdWJsaWMgc3RhdGljIENMQVNTX05BTUVTOiBhbnkgPSB7XG4gICAgICAgIFNFTEVDVEVEOiAnc2VsZWN0ZWQnLFxuICAgICAgICBXSVRIX0hSRUY6ICd3aXRoX2hyZWYnXG4gICAgfTtcblxuICAgIHByb3RlY3RlZCB0eXBlOiBhbnk7XG4gICAgcHJvdGVjdGVkIGF0dHJpYnV0ZXM6IGFueTtcblxuICAgIHByb3RlY3RlZCBfcGFyYW1zOiBhbnk7XG5cbiAgICBwcm90ZWN0ZWQgX2dyb3VwRWw6IGFueTtcbiAgICBwcm90ZWN0ZWQgX2VsOiBhbnk7XG4gICAgcHJvdGVjdGVkIF9oZWxwZXJzOiBhbnk7XG5cbiAgICBwdWJsaWMgZGVsdGE6IGFueTtcblxuICAgIHB1YmxpYyBocmVmOiBzdHJpbmc7XG4gICAgcHVibGljIGFsdDogc3RyaW5nO1xuICAgIHB1YmxpYyB0aXRsZTogc3RyaW5nO1xuXG5cbiAgICBjb25zdHJ1Y3Rvcihjb29yZHM6IGFueSwgdHlwZT86IGFueSkge1xuICAgICAgICAvLyBQdWJsaWMgcHJvcGVydGllczpcbiAgICAgICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICAgICAgdGhpcy5hdHRyaWJ1dGVzID0ge1xuICAgICAgICAgICAgaHJlZjogJycsXG4gICAgICAgICAgICBhbHQ6ICcnLFxuICAgICAgICAgICAgdGl0bGU6ICcnXG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gUHJpdmF0ZSBwcm9wZXJ0aWVzOlxuICAgICAgICB0aGlzLl9wYXJhbXMgPSB7fTtcblxuICAgICAgICAvLyB0aGUgZy1lbGVtZW50LCBpdCBjb250YWlucyB0aGlzIGFyZWEgYW5kIGhlbHBlcnMgZWxlbWVudHNcbiAgICAgICAgdGhpcy5fZ3JvdXBFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhBcmVhLlNWR19OUywgJ2cnKTtcbiAgICAgICAgQXJlYS5hcHAuYWRkTm9kZVRvU3ZnKHRoaXMuX2dyb3VwRWwpO1xuXG4gICAgICAgIC8vIFRvZG86IHJlbW92ZSB0aGlzIGZpZWxmIGZyb20gRE9NLWVsZW1lbnRcbiAgICAgICAgLyogTGluayB0byBwYXJlbnQgb2JqZWN0ICovXG4gICAgICAgIHRoaXMuX2dyb3VwRWwub2JqID0gdGhpcztcblxuICAgICAgICAvLyBzdmctZG9tLWVsZW1lbnQgb2YgYXJlYVxuICAgICAgICB0aGlzLl9lbCA9IG51bGw7XG5cbiAgICAgICAgLy8gQXJyYXkvb2JqZWN0IHdpdGggYWxsIGhlbHBlcnMgb2YgYXJlYVxuICAgICAgICB0aGlzLl9oZWxwZXJzID0ge307IC8vIG9yIFtdXG4gICAgfVxuXG4gICAgcHVibGljIHRlc3RDb29yZHMoKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVGhpcyBpcyBhYnN0cmFjdCBtZXRob2QnKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0Q29vcmRzKHBhcmFtcz86IGFueSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoaXMgaXMgYWJzdHJhY3QgbWV0aG9kJyk7XG4gICAgfVxuXG4gICAgcHVibGljIHJlZHJhdyhwYXJhbXM/OiBhbnkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGlzIGlzIGFic3RyYWN0IG1ldGhvZCcpO1xuICAgIH1cblxuICAgIHB1YmxpYyByZW1vdmUoKSB7XG4gICAgICAgIEFyZWEuYXBwLnJlbW92ZU5vZGVGcm9tU3ZnKHRoaXMuX2dyb3VwRWwpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZWxlY3QoKSB7XG4gICAgICAgIHRoaXMuX2VsLmNsYXNzTGlzdC5hZGQoQXJlYS5DTEFTU19OQU1FUy5TRUxFQ1RFRCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHB1YmxpYyBkZXNlbGVjdCgpIHtcbiAgICAgICAgdGhpcy5fZWwuY2xhc3NMaXN0LnJlbW92ZShBcmVhLkNMQVNTX05BTUVTLlNFTEVDVEVEKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcHVibGljIHdpdGhfaHJlZigpIHtcbiAgICAgICAgdGhpcy5fZWwuY2xhc3NMaXN0LmFkZChBcmVhLkNMQVNTX05BTUVTLldJVEhfSFJFRik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHB1YmxpYyB3aXRob3V0X2hyZWYoKSB7XG4gICAgICAgIHRoaXMuX2VsLmNsYXNzTGlzdC5yZW1vdmUoQXJlYS5DTEFTU19OQU1FUy5XSVRIX0hSRUYpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0SW5mb0F0dHJpYnV0ZXMocGFyYW1zOiBhbnkpIHtcbiAgICAgICAgaWYgKHBhcmFtcy5ocmVmKSB7XG4gICAgICAgICAgICB0aGlzLmF0dHJpYnV0ZXMuaHJlZiA9IHBhcmFtcy5ocmVmO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBhcmFtcy5hbHQpIHtcbiAgICAgICAgICAgIHRoaXMuYXR0cmlidXRlcy5hbHQgPSBwYXJhbXMuYWx0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBhcmFtcy50aXRsZSkge1xuICAgICAgICAgICAgdGhpcy5hdHRyaWJ1dGVzLnRpdGxlID0gcGFyYW1zLnRpdGxlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIHRvSlNPTigpOiBhbnkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLy8gdHlwZTogdGhpcy5fdHlwZSwvLz8/Pz8/XG4gICAgICAgICAgICBjb29yZHM6IHRoaXMuX3BhcmFtcyxcbiAgICAgICAgICAgIGF0dHJpYnV0ZXM6IHRoaXMuYXR0cmlidXRlc1xuICAgICAgICB9O1xuICAgIH1cbn0iXX0=