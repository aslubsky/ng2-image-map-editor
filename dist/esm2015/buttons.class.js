import { Utils } from './utils.class';
import { Area } from './area.class';
/* Buttons and actions */
export class Buttons {
    constructor(app) {
        this.app = app;
        this.all = Utils.id('nav').getElementsByTagName('li');
        this.rectangle = Utils.id('rectangle');
        this.circle = Utils.id('circle');
        this.polygon = Utils.id('polygon');
        this.edit = Utils.id('edit');
        this.clear = Utils.id('clear');
        this.to_html = Utils.id('to_html');
        this.show_help = Utils.id('show_help');
        this.rectangle.addEventListener('click', this.onShapeButtonClick.bind(this), false);
        this.circle.addEventListener('click', this.onShapeButtonClick.bind(this), false);
        this.polygon.addEventListener('click', this.onShapeButtonClick.bind(this), false);
        this.clear.addEventListener('click', this.onClearButtonClick.bind(this), false);
        this.to_html.addEventListener('click', this.onToHtmlButtonClick.bind(this), false);
        this.edit.addEventListener('click', this.onEditButtonClick.bind(this), false);
        this.show_help.addEventListener('click', this.onShowHelpButtonClick.bind(this), false);
    }
    deselectAll() {
        Utils.foreach(this.all, function (x) {
            x.classList.remove(Area.CLASS_NAMES.SELECTED);
        });
    }
    selectOne(button) {
        this.deselectAll();
        button.classList.add(Area.CLASS_NAMES.SELECTED);
    }
    onShapeButtonClick(e) {
        e.preventDefault();
        var target = e.target.id ? e.target : e.target.parentNode;
        // console.log('onShapeButtonClick', e, this, target, target.id);
        this.onSetInvalid();
        this.app.setMode('drawing')
            .setDrawClass()
            .setShape(target.id)
            .deselectAll()
            .hidePreview();
        // this.app.info.unload();
        this.selectOne(target);
    }
    onClearButtonClick(e) {
        e.preventDefault();
        // console.log('onClearButtonClick', e, this);
        // Clear all
        if (confirm('Clear all?')) {
            this.onSetInvalid();
            this.app.setMode(null)
                .setDefaultClass()
                .setShape(null)
                .clear()
                .hidePreview();
            this.deselectAll();
        }
    }
    onToHtmlButtonClick(e) {
        var answers = this.app.getAreas();
        var scale = 1;
        if (this.app.state.image.width > this.app.domElements.img.clientWidth) {
            scale = Number((this.app.state.image.width / this.app.domElements.img.clientWidth).toFixed(3));
        }
        else {
            scale = 1;
        }
        var resultsAnswers = [];
        answers.forEach(function (item, i, arr) {
            var imgMapData = item.toJSON();
            imgMapData.coords.forEach(function (item, i, arr) {
                imgMapData.coords[i] = Math.round(item * scale);
            });
            resultsAnswers.push({
                body: item.attributes.title,
                is_right: (item.attributes.alt == '1') ? true : false,
                img_map: JSON.stringify(imgMapData)
            });
        });
        this.onData(resultsAnswers, this.app.getAreasJSON(scale));
        // Generate html code only
        e.preventDefault();
    }
    onEditButtonClick(e) {
        e.preventDefault();
        this.onSetInvalid();
        if (this.app.getMode() === 'editing') {
            this.app.setMode(null)
                .setDefaultClass()
                .deselectAll();
            this.deselectAll();
            Utils.show(this.app.domElements.svg);
        }
        else {
            this.app.setShape(null)
                .setMode('editing')
                .setEditClass();
            this.selectOne(this.edit);
        }
        this.app.hidePreview();
    }
    onData(answers, areas) {
    }
    onSetInvalid() {
    }
    onShowHelpButtonClick(e) {
        this.app.help.show();
        e.preventDefault();
    }
}
//# sourceMappingURL=data:application/json;base64,